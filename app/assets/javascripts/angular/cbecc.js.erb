var cbecc = angular.module('cbecc', [
  'templates',
  'ngAnimate', 'ngResource', 'ngRoute',
  'toaster',
  'angular-cache',
  'ui.grid', 'ui.grid.autoResize', 'ui.grid.cellNav', 'ui.grid.edit', 'ui.grid.resizeColumns', 'ui.grid.selection', 'ui.grid.pinning',
  'ui.router', 'ui.router.stateHelper',
  'ui.bootstrap',
  'frapontillo.bootstrap-switch',
  'angularSpinner']);

cbecc.config(['$logProvider', '$urlRouterProvider', 'stateHelperProvider', '$httpProvider', 'usSpinnerConfigProvider', function ($logProvider, $urlRouterProvider, stateHelperProvider, $httpProvider, usSpinnerConfigProvider) {
  var isProd = <%= Rails.env.production? %>;
  $logProvider.debugEnabled(!isProd || localStorage.getItem('debug') === 'true');

  usSpinnerConfigProvider.setDefaults({
    color: '#70be44',
    lines: 13,
    length: 0,
    width: 22,
    radius: 60,
    speed: 2.2,
    trail: 60,
    shadow: false,
    hwaccel: true,
    top: '450px'
  });

  $urlRouterProvider.when('', '/').otherwise('404');

  $httpProvider.defaults.headers.common['X-CSRF-TOKEN'] = $('meta[name="csrf-token"]').attr('content');

  stateHelperProvider
    //states that require building should have requirebuilding as parent.
    .state({
      abstract: true,
      name: 'requirebuilding',
      template: '<ui-view>',
      resolve: {
        lookupbuilding: ['data', 'Shared', function (data, Shared) {
          return Shared.lookupBuilding(data, true);
        }]
      }
    })
    // states that have lookupbuilding as parent will throw error if there is no project id
    // and will try to set building id but not error out if it is unavailable.
    .state({
      abstract: true,
      name: 'lookupbuilding',
      template: '<ui-view>',
      resolve: {
        lookupbuilding: ['data', 'Shared', function (data, Shared) {
          return Shared.lookupBuilding(data);
        }]
      }
    })
    .state({
      name: 'project',
      url: '/',
      controller: 'ProjectCtrl',
      templateUrl: 'project/project.html',
      resolve: {
        project: ['data', 'Shared', function (data, Shared) {
          if (!Shared.getProjectId()) return {};
          return data.show('projects', {id: Shared.getProjectId()});
        }],
        plants: ['data', 'Shared', function (data, Shared) {
          if (!Shared.getBuildingId()) return [];
          return data.list('fluid_systems', Shared.defaultParams());
        }]
      }
    })
    .state({
      name: 'projectDetails',
      url: '/projects/{project_id:[0-9a-f]{24}}',
      controller: 'ProjectCtrl',
      templateUrl: 'project/project.html',
      parent: 'lookupbuilding',
      resolve: {
        project: ['data', 'Shared', function (data, Shared) {
          return data.show('projects', {id: Shared.getProjectId()});
        }],
        plants: ['data', 'Shared', 'lookupbuilding', function (data, Shared, lookupbuilding) {
          if (!Shared.getBuildingId())  return [];
          return data.list('fluid_systems', Shared.defaultParams());
        }]
      }
    })
    .state({
      name: 'buildingPlaceholder',
      url: '/buildings',
      controller: 'BuildingCtrl',
      templateUrl: 'building/building.html',
      resolve: {
        building: ['data', 'Shared', 'lookupbuilding', function (data, Shared, lookupbuilding) {
          if (!Shared.getBuildingId()) return {};
          return data.show('buildings', {id: Shared.getBuildingId(), project_id: Shared.getProjectId()});
        }],
        stories: ['data', 'Shared', 'lookupbuilding', function (data, Shared, lookupbuilding) {
          return data.list('building_stories', Shared.defaultParams());
        }],
        spaces: ['data', 'Shared', 'lookupbuilding', function (data, Shared, lookupbuilding) {
          return data.list('spaces', Shared.defaultParams());
        }]
      },
      parent: 'lookupbuilding'
    })
    .state({
      name: 'building',
      url: '/projects/{project_id:[0-9a-f]{24}}/buildings',
      controller: 'BuildingCtrl',
      templateUrl: 'building/building.html',
      resolve: {
        building: ['data', 'Shared', 'lookupbuilding', function (data, Shared, lookupbuilding) {
          if (!Shared.getBuildingId()) return {};
          return data.show('buildings', {id: Shared.getBuildingId(), project_id: Shared.getProjectId()});
        }],
        stories: ['data', 'Shared', 'lookupbuilding', function (data, Shared, lookupbuilding) {
          return data.list('building_stories', Shared.defaultParams());
        }],
        spaces: ['data', 'Shared', 'lookupbuilding', function (data, Shared, lookupbuilding) {
          return data.list('spaces', Shared.defaultParams());
        }]
      },
      parent: 'lookupbuilding'
    })
    .state({
      name: 'buildingDetails',
      url: '/projects/{project_id:[0-9a-f]{24}}/buildings/{building_id:[0-9a-f]{24}}',
      controller: 'BuildingCtrl',
      templateUrl: 'building/building.html',
      resolve: {
        building: ['data', 'Shared', 'lookupbuilding', function (data, Shared, lookupbuilding) {
          return data.show('buildings', {id: Shared.getBuildingId(), project_id: Shared.getProjectId()});
        }],
        stories: ['data', 'Shared', 'lookupbuilding', function (data, Shared, lookupbuilding) {
          return data.list('building_stories', Shared.defaultParams());
        }],
        spaces: ['data', 'Shared', 'lookupbuilding', function (data, Shared, lookupbuilding) {
          return data.list('spaces', Shared.defaultParams());
        }]
      },
      parent: 'requirebuilding'
    })
    .state({
      name: 'constructions',
      url: '/projects/{project_id:[0-9a-f]{24}}/buildings/{building_id:[0-9a-f]{24}}/constructions',
      controller: 'ConstructionsCtrl',
      templateUrl: 'constructions/constructions.html',
      resolve: {
        constData: ['data', 'lookupbuilding', function (data, lookupbuilding) {
          return data.list('constructions');
        }],
        doorData: ['data', 'lookupbuilding', function (data, lookupbuilding) {
          return data.list('door_lookups');
        }],
        fenData: ['data', 'lookupbuilding', function (data, lookupbuilding) {
          return data.list('fenestrations');
        }],
        defaults: ['data', 'Shared', 'lookupbuilding', function (data, Shared, lookupbuilding) {
          return data.list('construction_defaults', Shared.defaultParams());
        }],
        spaces: ['data', 'Shared', 'lookupbuilding', function (data, Shared, lookupbuilding) {
          return data.list('spaces', Shared.defaultParams());
        }]
      },
      parent: 'requirebuilding'
    })
    .state({
      name: 'constructions_placeholder',
      url: '/constructions',
      controller: 'ConstructionsCtrl',
      templateUrl: 'constructions/constructions.html',
      parent: 'requirebuilding'
    })
    .state({
      name: 'spaces',
      url: '/projects/{project_id:[0-9a-f]{24}}/buildings/{building_id:[0-9a-f]{24}}/spaces',
      controller: 'SpacesCtrl',
      templateUrl: 'spaces/spaces.html',
      resolve: {
        constData: ['data', 'lookupbuilding', function (data, lookupbuilding) {
          return data.list('constructions');
        }],
        doorData: ['data', 'lookupbuilding', function (data, lookupbuilding) {
          return data.list('door_lookups');
        }],
        fenData: ['data', 'lookupbuilding', function (data, lookupbuilding) {
          return data.list('fenestrations');
        }],
        spaceFunctionDefaults: ['data', 'Shared', 'lookupbuilding', function (data, Shared, lookupbuilding) {
          return data.list('space_function_defaults', Shared.defaultParams());
        }],
        stories: ['data', 'Shared', 'lookupbuilding', function (data, Shared, lookupbuilding) {
          return data.list('building_stories', Shared.defaultParams());
        }],
        spaces: ['data', 'Shared', 'lookupbuilding', function (data, Shared, lookupbuilding) {
          return data.list('spaces', Shared.defaultParams());
        }],
        constructionDefaults: ['data', 'Shared', 'lookupbuilding', function (data, Shared, lookupbuilding) {
          return data.list('construction_defaults', Shared.defaultParams());
        }],
        luminaires: ['data', 'Shared', 'lookupbuilding', function (data, Shared, lookupbuilding) {
          return data.list('luminaires', Shared.defaultParams());
        }],
        systems: ['data', 'Shared', 'lookupbuilding', function (data, Shared, lookupbuilding) {
          return data.list('zone_systems', Shared.defaultParams());
        }],
        zones: ['data', 'Shared', 'lookupbuilding', function (data, Shared, lookupbuilding) {
          return data.list('thermal_zones', Shared.defaultParams());
        }]
      },
      parent: 'requirebuilding',
      children: [{
        // No controller here because the file is ng-included
        name: 'main',
        url: '',
        templateUrl: 'spaces/main.html'
      }, {
        name: 'settings',
        url: '/settings',
        controller: 'SpacesSettingsCtrl',
        templateUrl: 'spaces/settings.html'
      }, {
        name: 'surfaces',
        url: '/surfaces',
        controller: 'SpacesSurfacesCtrl',
        templateUrl: 'spaces/surfaces.html'
      }, {
        name: 'subsurfaces',
        url: '/subsurfaces',
        controller: 'SpacesSubsurfacesCtrl',
        templateUrl: 'spaces/subsurfaces.html'
      }, {
        name: 'ventilation',
        url: '/ventilation',
        controller: 'SpacesVentilationCtrl',
        templateUrl: 'spaces/ventilation.html'
      }, {
        name: 'loads',
        url: '/loads',
        controller: 'SpacesLoadsCtrl',
        templateUrl: 'spaces/loads.html'
      }, {
        name: 'gas',
        url: '/gas',
        controller: 'SpacesGasCtrl',
        templateUrl: 'spaces/gas.html'
      }, {
        name: 'lighting',
        url: '/lighting',
        controller: 'SpacesLightingCtrl',
        templateUrl: 'spaces/lighting.html'
      }]
    })
    .state({
      name: 'spaces_placeholder',
      url: '/spaces',
      controller: 'SpacesCtrl',
      templateUrl: 'spaces/spaces.html',
      parent: 'requirebuilding'
    })
    .state({
      name: 'systems',
      url: '/projects/{project_id:[0-9a-f]{24}}/buildings/{building_id:[0-9a-f]{24}}/systems',
      controller: 'SystemsCtrl',
      templateUrl: 'systems/systems.html',
      resolve: {
        project: ['data', 'Shared', 'lookupbuilding', function (data, Shared, lookupbuilding) {
          return data.show('projects', {id: Shared.getProjectId()});
        }],
        systems: ['data', 'Shared', 'lookupbuilding', function (data, Shared, lookupbuilding) {
          return data.list('zone_systems', Shared.defaultParams());
        }],
        plants: ['data', 'Shared', 'lookupbuilding', function (data, Shared, lookupbuilding) {
          return data.list('fluid_systems', Shared.defaultParams());
        }],
        zones: ['data', 'Shared', 'lookupbuilding', function (data, Shared, lookupbuilding) {
          return data.list('thermal_zones', Shared.defaultParams());
        }]
      },
      parent: 'requirebuilding'
    })
    .state({
      name: 'systems_placeholder',
      url: '/systems',
      controller: 'SystemsCtrl',
      templateUrl: 'systems/systems.html',
      parent: 'requirebuilding'
    })
    .state({
      name: 'zones',
      url: '/projects/{project_id:[0-9a-f]{24}}/buildings/{building_id:[0-9a-f]{24}}/zones',
      controller: 'ZonesCtrl',
      templateUrl: 'zones/zones.html',
      resolve: {
        stories: ['data', 'Shared', 'lookupbuilding', function (data, Shared, lookupbuilding) {
          return data.list('building_stories', Shared.defaultParams());
        }],
        spaces: ['data', 'Shared', 'lookupbuilding', function (data, Shared, lookupbuilding) {
          return data.list('spaces', Shared.defaultParams());
        }],
        zones: ['data', 'Shared', 'lookupbuilding', function (data, Shared, lookupbuilding) {
          return data.list('thermal_zones', Shared.defaultParams());
        }],
        systems: ['data', 'Shared', 'lookupbuilding', function (data, Shared, lookupbuilding) {
          return data.list('zone_systems', Shared.defaultParams());
        }],
        terminals: ['data', 'Shared', 'lookupbuilding', function (data, Shared, lookupbuilding) {
          return data.list('terminal_units', Shared.defaultParams());
        }]
      },
      parent: 'requirebuilding',
      children: [{
        // No controller here because the file is ng-included
        name: 'main',
        url: '',
        templateUrl: 'zones/main.html'
      }, {
        name: 'spaces',
        url: '/spaces',
        controller: 'ZonesSpacesCtrl',
        templateUrl: 'zones/spaces.html'
      }, {
        name: 'systems',
        url: '/systems',
        controller: 'ZonesSystemsCtrl',
        templateUrl: 'zones/systems.html'
      }, {
        name: 'exhausts',
        url: '/exhausts',
        controller: 'ZonesExhaustsCtrl',
        templateUrl: 'zones/exhausts.html'
      }, {
        name: 'terminals',
        url: '/terminals',
        controller: 'ZonesTerminalsCtrl',
        templateUrl: 'zones/terminals.html'
      }]
    })
    .state({
      name: 'zones_placeholder',
      url: '/zones',
      controller: 'ZonesCtrl',
      templateUrl: 'zones/zones.html',
      parent: 'requirebuilding'
    })
    .state({
      name: 'compliance',
      url: '/projects/{project_id:[0-9a-f]{24}}/buildings/{building_id:[0-9a-f]{24}}/compliance',
      controller: 'ComplianceCtrl',
      templateUrl: 'compliance/compliance.html',
      parent: 'requirebuilding',
      resolve: {
        simulation: ['data', 'Shared', 'lookupbuilding', function (data, Shared, lookupbuilding) {
          return data.show('simulations', {id: Shared.getSimulationId()});
        }]
      }
    })
    .state({
      name: 'compliance_placeholder',
      url: '/compliance',
      controller: 'ComplianceCtrl',
      templateUrl: 'compliance/compliance.html',
      parent: 'requirebuilding'
    })
    .state({
      name: '404',
      url: '/404',
      templateUrl: '404/404.html'
    });
}]);


cbecc.run(['$rootScope', '$log', '$state', '$modal', 'toaster', 'Shared', 'api', function ($rootScope, $log, $state, $modal, toaster, Shared, api) {
  api.add(['building_stories', 'buildings', 'construction_defaults', 'constructions', 'door_lookups', 'fenestrations', 'fluid_systems', 'luminaires', 'projects', 'simulations', 'space_function_defaults', 'spaces', 'terminal_units', 'thermal_zones', 'zone_systems']);

  $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {

    // Don't prompt to save on subtab changes
    var to = toState.hasOwnProperty('parent') ? (toState.parent.hasOwnProperty('name') ? toState.parent.name : toState.name) : null;
    var from = fromState.hasOwnProperty('parent') ? (fromState.parent.hasOwnProperty('name') ? fromState.parent.name : fromState.name) : null;
    var ignoreModified = _.contains(['requirebuilding.spaces', 'requirebuilding.zones'], to) && to == from;

    // Don't prompt when on project with no building
    if (fromState.name == 'project') ignoreModified = true;

    // Don't prompt when on building with no building and clicking a non-project tab
    if (fromState.name == 'lookupbuilding.building' && toState.name != 'lookupbuilding.projectDetails') ignoreModified = true;

    // Check for unsaved data first
    if (Shared.isModified() && !ignoreModified) {
      event.preventDefault();

      Shared.showModifiedDialog().then(function () {
        Shared.resetModified();
        $state.go(toState, toParams);
      });
    } else {
      Shared.setIds(toParams); // getBuilding should go into this - index request to determine building id
      Shared.startSpinner();
    }
  });
  $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {
    Shared.stopSpinner();
  });
  $rootScope.$on('$stateChangeError', function (event, toState, toParams, fromState, fromParams, error) {
    Shared.stopSpinner();
    if (error == 'No project ID' || error == 'Invalid project ID') {
      toaster.pop('error', error, 'Please create or open a project.');
      Shared.setProjectId(null);
      Shared.setSimulationId(null);
      $state.go('project');
    } else if (error == 'No building ID' || error == 'Invalid building ID') {
      toaster.pop('error', error, 'Please create a building.');
      Shared.setBuildingId(null);
      $state.go('lookupbuilding.building', {
        project_id: Shared.getProjectId()
      });
    } else {
      $log.error('Unhandled state change error:', error);
      Shared.setProjectId(null);
      Shared.setBuildingId(null);
      Shared.setSimulationId(null);
      $state.go('project');
    }
  });
  $rootScope.$on('$stateNotFound', function (event, unfoundState, fromState, fromParams) {
    $log.error('State not found:', unfoundState.to);
  });

  $rootScope.konami = function () {
    var tmpl = _.template('<div class="modal-header"><h3 class="modal-title"><%%= title %></h3></div><div class="modal-body"><form class="form-horizontal"><%%= form %></form></div><div class="modal-footer"><button type="button" class="btn btn-primary" ng-click="$close()">OK</button><button type="button" class="btn btn-warning" ng-click="$close()">Cancel</button></div>');
    $modal.open({
      backdrop: 'static',
      template: tmpl({
        title: 'Create Project',
        form: '<div class="form-group"><label class="col-sm-6 control-label">Project Creation Option:</label><div class="col-sm-6"><select class="form-control"><option>Create New Object</option></select></div></div><div class="form-group"><label class="col-sm-6 control-label">Project Name:</label><div class="col-sm-6"><input type="text" class="form-control" value="Project 1"></div></div>'
      })
    }).result.then(function () {
        $modal.open({
          backdrop: 'static',
          template: tmpl({
            title: '\'Project 1\' Primary Data',
            form: '<div class="form-group"><label class="col-sm-6 control-label">ComplianceType:</label><div class="col-sm-6"><select class="form-control"><option ng-repeat="item in [\'\', \'NewComplete\', \'NewEnvelope\', \'NewEnvelopeAndLighting\', \'NewEnvelopeAndPartialLighting\', \'NewMechanical\', \'NewMechanicalAndLighting\', \'NewMechanicalAndPartialLighting\', \'ExistingAddition\', \'ExistingAlteration\', \'ExistingAdditionAndAlteration\']">{{item}}</option></select></div></div>'
          })
        }).result.then(function () {
            $modal.open({
              backdrop: 'static',
              template: tmpl({
                title: 'Create Building',
                form: '<div class="form-group"><label class="col-sm-6 control-label">Building Creation Option:</label><div class="col-sm-6"><select class="form-control"><option>Create New Object</option></select></div></div><div class="form-group"><label class="col-sm-6 control-label">Building Name:</label><div class="col-sm-6"><input type="text" class="form-control" value="Building"></div></div><div class="form-group"><label class="col-sm-6 control-label">Parent Component:</label><div class="col-sm-6"><select class="form-control"><option>Project 1</option></select></div></div>'
              })
            }).result.then(function () {
                $modal.open({
                  backdrop: 'static',
                  template: tmpl({
                    title: 'Create BuildingStory',
                    form: '<div class="form-group"><label class="col-sm-6 control-label">BuildingStory Creation Option:</label><div class="col-sm-6"><select class="form-control"><option>Create New Object</option></select></div></div><div class="form-group"><label class="col-sm-6 control-label">BuildingStory Name:</label><div class="col-sm-6"><input type="text" class="form-control" value="BuildingStory 1"></div></div><div class="form-group"><label class="col-sm-6 control-label">Parent Component:</label><div class="col-sm-6"><select class="form-control"><option>Building</option></select></div></div>'
                  })
                }).result.then(function () {
                    $modal.open({
                      backdrop: 'static',
                      template: tmpl({
                        title: '\'BuildingStory 1\' Primary Data',
                        form: '<div class="form-group"><label class="col-sm-6 control-label">Z:</label><div class="col-sm-6"><input type="text" class="form-control"></div></div><div class="form-group"><label class="col-sm-6 control-label">FloorToFloorHeight:</label><div class="col-sm-6"><input type="text" class="form-control"></div></div><div class="form-group"><label class="col-sm-6 control-label">FloorToCeilingHeight:</label><div class="col-sm-6"><input type="text" class="form-control"></div></div>'
                      })
                    }).result.then(function () {
                        $modal.open({
                          backdrop: 'static',
                          template: tmpl({
                            title: 'Create Space',
                            form: '<div class="form-group"><label class="col-sm-6 control-label">Space Creation Option:</label><div class="col-sm-6"><select class="form-control"><option>Create New Object</option></select></div></div><div class="form-group"><label class="col-sm-6 control-label">Space Name:</label><div class="col-sm-6"><input type="text" class="form-control" value="Space 1"></div></div><div class="form-group"><label class="col-sm-6 control-label">Parent Component:</label><div class="col-sm-6"><select class="form-control"><option>BuildingStory 1</option></select></div></div>'
                          })
                        }).result.then(function () {
                            $modal.open({
                              backdrop: 'static',
                              template: tmpl({
                                title: '\'Space 1\' Primary Data',
                                form: '<div class="form-group"><label class="col-sm-6 control-label">Area:</label><div class="col-sm-6"><input type="text" class="form-control"></div></div><div class="form-group"><label class="col-sm-6 control-label">SpaceFunction:</label><div class="col-sm-6"><select class="form-control"><option ng-repeat="item in [\'\', \'Unoccupied-Include in Gross Floor Area\', \'Unoccupied-Exclude from Gross Floor Area\', \'Auditorium Area\', \'Auto Repair Area\', \'Bar, Cocktail Lounge and Casino Areas\', \'Beauty Salon Area\', \'Classrooms, Lecture, Training, Vocational Areas\', \'Civic Meeting Place Area\', \'Commercial and Industrial Storage Areas (conditioned or unconditioned)\', \'Commercial and Industrial Storage Areas (refrigerated)\', \'Computer Room\', \'Convention, Conference, Multipurpose and Meeting Center Areas\', \'Corridors, Restrooms, Stairs, and Support Areas\', \'Dining Area\', \'Dry Cleaning (Coin Operated)\', \'Dry Cleaning (Full Service Commercial)\', \'Electrical, Mechanical, Telephone Rooms\', \'Exercise Center, Gymnasium Areas\', \'Exhibit, Museum Areas\', \'Financial Transaction Area\', \'General Commercial and Industrial Work Areas, High Bay\', \'General Commercial and Industrial Work Areas, Low Bay\', \'General Commercial and Industrial Work Areas, Precision\', \'Grocery Sales Areas\', \'High-Rise Residential Living Spaces\', \'Hotel Function Area\', \'Hotel/Motel Guest Room\', \'Housing, Public and Common Areas: Multi-family, Dormitory\', \'Housing, Public and Common Areas: Senior Housing\', \'Kitchen, Commercial Food Preparation\', \'Kitchenette or Residential Kitchen\', \'Laboratory, Scientific\', \'Laboratory, Equipment Room\', \'Laundry\', \'Library, Reading Areas\', \'Library, Stacks\', \'Lobby, Hotel\', \'Lobby, Main Entry\', \'Locker/Dressing Room\', \'Lounge, Recreation\', \'Malls and Atria\', \'Medical and Clinical Care\', \'Office (Greater than 250 square feet in floor area)\', \'Office (250 square feet in floor area or less)\', \'Parking Garage Building, Parking Area\', \'Parking Garage Area Dedicated Ramps\', \'Parking Garage Area Daylight Adaptation Zones\', \'Police Station and Fire Station\', \'Religious Worship Area\', \'Retail Merchandise Sales, Wholesale Showroom\', \'Sports Arena, Indoor Playing Area\', \'Theater, Motion Picture\', \'Theater, Performance\', \'Transportation Function\', \'Videoconferencing Studio\', \'Waiting Area\']">{{item}}</option></select></div></div>'
                              })
                            });
                          });
                      });
                  });
              });
          });
      });
  }
}]);


cbecc.filter('mapEnums', ['Enums', function (Enums) {
  return function (input, name) {
    return Enums.enumsArr[name][input].value;
  };
}]).filter('mapHash', function () {
  return function (input, hash) {
    return hash[input];
  };
}).filter('parseRValue', function () {
  return function (input) {
    return input.replace('_', '.').replace(/[^\d.]/g, '');
  };
});
